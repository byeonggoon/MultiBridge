const { utils, providers, BigNumber } = require("ethers");
require("dotenv").config();

const {
  acrossABI,
  allBridgeABI,
  cBridgeABI,
  connextABI,
  dlnABI,
  hopABI,
  hyphenABI,
  stargateABI,
  symbiosisABI,
  synapseABI,
  xyBridgeABI,
  multiABI,
} = require("../diamondABI");

// 인터페이스 생성

const hyphen = new utils.Interface(hyphenABI);
const multi = new utils.Interface(multiABI);

const multiAddresses = {
  ARBI_MULTI: "0x114145431Fa68f644C532FF5958dCE74288F32e8",
  OPTI_MULTI: "0xadaB247D6a0605BB47c3D6C063DCa5B2A6584205",
};

const diamondAddresses = {
  OPTI_PLEXUS_DIAMOND: "0x94246aC21feacFD33D043C46014f373F174Edc17",
  ARBI_PLEXUS_DIAMOND: "0x52cdb00b69f11c4ca932fa9108c6bfdd65f20d62",
};

const tokenAddresses = {
  OPTI_USDT: "0x94b008aA00579c1307B0EF2c499aD98a8ce58e58",
  OPTI_USDCe: "0x7F5c764cBc14f9669B88837ca1490cCa17c31607",
  ARBI_USDT: "0xFd086bC7CD5C481DCC9C85ebE478A1C0b69FCbb9",
};

const NATIVE = "0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE";

const networkName = "ARBI";
const provider = new providers.JsonRpcProvider(process.env.MAIN_ARBI_URL);

const srcToken = tokenAddresses[`${networkName}_USDT`];
const amount = 1000000000; //utils.parseEther("1000"); //utils.parseEther("0.001");
const dstChainId = "10";
const recipient = "0x0Bb989a2593E7513B44ae408F1e3191E0183b20a";
const plexusData = "0x"; // 빈 데이터

// console.log("utils.parseEther", utils.parseEther("0.001"));

const callData_hyphen = hyphen.encodeFunctionData(hyphenABI[0].name, [
  [srcToken, amount, dstChainId, recipient, plexusData],
]);

console.log("callData_hyphen", callData_hyphen);
console.log("=======================", multiABI[1].name);

const multiData = multi.encodeFunctionData(multiABI[1].name, [
  [
    {
      target: diamondAddresses[`${networkName}_PLEXUS_DIAMOND`], // 호출 대상 주소
      allowFailure: "false",
      value: 0,
      callData:
        "0x5b4979c300000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000180000000000000000000000000fd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb9000000000000000000000000000000000000000000000000000000001dcd6500000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000b612cf824bff640b5f3e408eba5eaf2f46e1f09b00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000002439333834383664312d386264302d343163312d626363352d64343330366633373635653500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000dad8efb7261440000000000000000000000000000000000000000000000000000000065decab400000000000000000000000000000000000000000000000000000000000000a0ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000000000000000000000fd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb90000000000000000000000000000000000000000000000000000000000000000",
    },
    {
      target: diamondAddresses[`${networkName}_PLEXUS_DIAMOND`], // 호출 대상 주소
      allowFailure: "false",
      value: 0,
      callData:
        "0xa8d735fa0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000fd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb90000000000000000000000000000000000000000000000000000000005f5e100000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000b612cf824bff640b5f3e408eba5eaf2f46e1f09b00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000002464613231323663622d663636362d346336642d626566392d32313234316666326130663300000000000000000000000000000000000000000000000000000000",
    },
    {
      target: diamondAddresses[`${networkName}_PLEXUS_DIAMOND`], // 호출 대상 주소
      allowFailure: "false",
      value: 0,
      callData:
        "0xfc7b926a0000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000012c00000000000000000000000000000000000000000000000000000000001cf59900000000000000000000000094246ac21feacfd33d043c46014f373f174edc17000000000000000000000000fd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb9000000000000000000000000000000000000000000000000000000001dcd6500000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000b612cf824bff640b5f3e408eba5eaf2f46e1f09b00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000002432346532343931332d333737652d346663382d626630332d65373065346338393534373500000000000000000000000000000000000000000000000000000000",
    },
  ],
]);
console.log("multiData", multiData);
console.log("=======================");

// console.log("provider", provider);
//value: utils.parseEther("0.2"),

const multi_tx = {
  to: multiAddresses[`${networkName}_MULTI`], // 대상 스마트 컨트랙트 주소
  data: multiData,
  value: 0,
};

// 가스 비용 추정
async function estimateGas() {
  try {
    gasPrice = await provider.getGasPrice();
    console.log("gasPrice", gasPrice.toString()); // 0.0000000000005568382

    const estimatedGas = await provider.estimateGas(multi_tx);
    console.log(`Estimated used Gas: ${estimatedGas.toString()}`);

    const estimatedGasBig = BigNumber.from(estimatedGas.toString());
    const gasPriceBig = BigNumber.from(gasPrice.toString());

    const totalCost = estimatedGasBig.mul(gasPriceBig);
    const totalCostInEther = utils.formatUnits(totalCost, "ether");
    console.log("totalCostInEther", totalCostInEther);
  } catch (error) {
    console.error(`Error estimating gas: ${error.message}`);
  }
}

// Installation instructions: https://docs.ethers.io/v5/getting-started/#installing
estimateGas();
